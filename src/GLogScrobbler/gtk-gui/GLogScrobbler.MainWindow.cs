// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.42
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace GLogScrobbler {
    
    
    public partial class MainWindow {
        
        private Gtk.Action LogAction;
        
        private Gtk.Action SubmitAction;
        
        private Gtk.Action OpenAction;
        
        private Gtk.Action EditAction;
        
        private Gtk.Action LastFmAccountAction;
        
        private Gtk.Action HelpAction;
        
        private Gtk.Action AboutAction;
        
        private Gtk.Action QuitAction;
        
        private Gtk.Action PreferencesAction;
        
        private Gtk.VBox vbox1;
        
        private Gtk.MenuBar MainMenuBar;
        
        private Gtk.Toolbar MainToolbar;
        
        private Gtk.ScrolledWindow GtkScrolledWindow;
        
        private Gtk.TreeView TracksTreeView;
        
        private Gtk.HBox hbox2;
        
        private Gtk.Label statusLabel;
        
        private Gtk.Label skippedLabel;
        
        private Gtk.VSeparator vseparator1;
        
        private Gtk.Label playedLabel;
        
        protected virtual void Build() {
            Stetic.Gui.Initialize(this);
            // Widget GLogScrobbler.MainWindow
            Gtk.UIManager w1 = new Gtk.UIManager();
            Gtk.ActionGroup w2 = new Gtk.ActionGroup("Default");
            this.LogAction = new Gtk.Action("LogAction", Mono.Unix.Catalog.GetString("_Log"), null, null);
            this.LogAction.ShortLabel = Mono.Unix.Catalog.GetString("_Log");
            w2.Add(this.LogAction, null);
            this.SubmitAction = new Gtk.Action("SubmitAction", Mono.Unix.Catalog.GetString("_Submit"), Mono.Unix.Catalog.GetString("Submit the played tracks to Last.fm"), "gtk-go-up");
            this.SubmitAction.IsImportant = true;
            this.SubmitAction.Sensitive = false;
            this.SubmitAction.ShortLabel = Mono.Unix.Catalog.GetString("_Submit");
            w2.Add(this.SubmitAction, "<Control>s");
            this.OpenAction = new Gtk.Action("OpenAction", Mono.Unix.Catalog.GetString("_Open"), Mono.Unix.Catalog.GetString("Open a log file"), "gtk-open");
            this.OpenAction.IsImportant = true;
            this.OpenAction.ShortLabel = Mono.Unix.Catalog.GetString("_Open");
            w2.Add(this.OpenAction, null);
            this.EditAction = new Gtk.Action("EditAction", Mono.Unix.Catalog.GetString("_Edit"), null, null);
            this.EditAction.ShortLabel = Mono.Unix.Catalog.GetString("_Edit");
            w2.Add(this.EditAction, null);
            this.LastFmAccountAction = new Gtk.Action("LastFmAccountAction", Mono.Unix.Catalog.GetString("Last.fm _Account"), null, "gtk-dialog-authentication");
            this.LastFmAccountAction.ShortLabel = Mono.Unix.Catalog.GetString("Last.fm _Account");
            w2.Add(this.LastFmAccountAction, null);
            this.HelpAction = new Gtk.Action("HelpAction", Mono.Unix.Catalog.GetString("_Help"), null, null);
            this.HelpAction.ShortLabel = Mono.Unix.Catalog.GetString("_Help");
            w2.Add(this.HelpAction, null);
            this.AboutAction = new Gtk.Action("AboutAction", Mono.Unix.Catalog.GetString("_About"), null, "gtk-about");
            this.AboutAction.ShortLabel = Mono.Unix.Catalog.GetString("_About");
            w2.Add(this.AboutAction, null);
            this.QuitAction = new Gtk.Action("QuitAction", Mono.Unix.Catalog.GetString("_Quit"), null, "gtk-quit");
            this.QuitAction.ShortLabel = Mono.Unix.Catalog.GetString("_Quit");
            w2.Add(this.QuitAction, null);
            this.PreferencesAction = new Gtk.Action("PreferencesAction", Mono.Unix.Catalog.GetString("_Preferences"), null, "gtk-preferences");
            this.PreferencesAction.Sensitive = false;
            this.PreferencesAction.ShortLabel = Mono.Unix.Catalog.GetString("_Preferences");
            w2.Add(this.PreferencesAction, null);
            w1.InsertActionGroup(w2, 0);
            this.AddAccelGroup(w1.AccelGroup);
            this.Name = "GLogScrobbler.MainWindow";
            this.Title = Mono.Unix.Catalog.GetString("GNOME Log Scrobbler");
            this.Icon = Stetic.IconLoader.LoadIcon(this, "gtk-go-up", Gtk.IconSize.Menu, 16);
            this.WindowPosition = ((Gtk.WindowPosition)(1));
            // Container child GLogScrobbler.MainWindow.Gtk.Container+ContainerChild
            this.vbox1 = new Gtk.VBox();
            this.vbox1.Name = "vbox1";
            // Container child vbox1.Gtk.Box+BoxChild
            w1.AddUiFromString("<ui><menubar name='MainMenuBar'><menu action='LogAction'><menuitem action='OpenAction'/><menuitem action='SubmitAction'/><separator/><menuitem action='QuitAction'/></menu><menu action='EditAction'><menuitem action='LastFmAccountAction'/><separator/><menuitem action='PreferencesAction'/></menu><menu action='HelpAction'><menuitem action='AboutAction'/></menu></menubar></ui>");
            this.MainMenuBar = ((Gtk.MenuBar)(w1.GetWidget("/MainMenuBar")));
            this.MainMenuBar.Name = "MainMenuBar";
            this.vbox1.Add(this.MainMenuBar);
            Gtk.Box.BoxChild w3 = ((Gtk.Box.BoxChild)(this.vbox1[this.MainMenuBar]));
            w3.Position = 0;
            w3.Expand = false;
            w3.Fill = false;
            // Container child vbox1.Gtk.Box+BoxChild
            w1.AddUiFromString("<ui><toolbar name='MainToolbar'><toolitem action='OpenAction'/><toolitem action='SubmitAction'/></toolbar></ui>");
            this.MainToolbar = ((Gtk.Toolbar)(w1.GetWidget("/MainToolbar")));
            this.MainToolbar.Name = "MainToolbar";
            this.MainToolbar.ShowArrow = false;
            this.MainToolbar.IconSize = ((Gtk.IconSize)(2));
            this.vbox1.Add(this.MainToolbar);
            Gtk.Box.BoxChild w4 = ((Gtk.Box.BoxChild)(this.vbox1[this.MainToolbar]));
            w4.Position = 1;
            w4.Expand = false;
            w4.Fill = false;
            // Container child vbox1.Gtk.Box+BoxChild
            this.GtkScrolledWindow = new Gtk.ScrolledWindow();
            this.GtkScrolledWindow.Name = "GtkScrolledWindow";
            this.GtkScrolledWindow.ShadowType = ((Gtk.ShadowType)(1));
            // Container child GtkScrolledWindow.Gtk.Container+ContainerChild
            this.TracksTreeView = new Gtk.TreeView();
            this.TracksTreeView.CanDefault = true;
            this.TracksTreeView.CanFocus = true;
            this.TracksTreeView.Name = "TracksTreeView";
            this.TracksTreeView.RulesHint = true;
            this.GtkScrolledWindow.Add(this.TracksTreeView);
            this.vbox1.Add(this.GtkScrolledWindow);
            Gtk.Box.BoxChild w6 = ((Gtk.Box.BoxChild)(this.vbox1[this.GtkScrolledWindow]));
            w6.Position = 2;
            // Container child vbox1.Gtk.Box+BoxChild
            this.hbox2 = new Gtk.HBox();
            this.hbox2.Name = "hbox2";
            this.hbox2.Spacing = 6;
            this.hbox2.BorderWidth = ((uint)(3));
            // Container child hbox2.Gtk.Box+BoxChild
            this.statusLabel = new Gtk.Label();
            this.statusLabel.Name = "statusLabel";
            this.statusLabel.LabelProp = Mono.Unix.Catalog.GetString("status");
            this.hbox2.Add(this.statusLabel);
            Gtk.Box.BoxChild w7 = ((Gtk.Box.BoxChild)(this.hbox2[this.statusLabel]));
            w7.Position = 0;
            w7.Expand = false;
            w7.Fill = false;
            // Container child hbox2.Gtk.Box+BoxChild
            this.skippedLabel = new Gtk.Label();
            this.skippedLabel.Name = "skippedLabel";
            this.skippedLabel.LabelProp = Mono.Unix.Catalog.GetString("skipped");
            this.hbox2.Add(this.skippedLabel);
            Gtk.Box.BoxChild w8 = ((Gtk.Box.BoxChild)(this.hbox2[this.skippedLabel]));
            w8.PackType = ((Gtk.PackType)(1));
            w8.Position = 1;
            w8.Expand = false;
            w8.Fill = false;
            // Container child hbox2.Gtk.Box+BoxChild
            this.vseparator1 = new Gtk.VSeparator();
            this.vseparator1.Name = "vseparator1";
            this.hbox2.Add(this.vseparator1);
            Gtk.Box.BoxChild w9 = ((Gtk.Box.BoxChild)(this.hbox2[this.vseparator1]));
            w9.PackType = ((Gtk.PackType)(1));
            w9.Position = 2;
            w9.Expand = false;
            w9.Fill = false;
            // Container child hbox2.Gtk.Box+BoxChild
            this.playedLabel = new Gtk.Label();
            this.playedLabel.Name = "playedLabel";
            this.playedLabel.LabelProp = Mono.Unix.Catalog.GetString("played");
            this.hbox2.Add(this.playedLabel);
            Gtk.Box.BoxChild w10 = ((Gtk.Box.BoxChild)(this.hbox2[this.playedLabel]));
            w10.PackType = ((Gtk.PackType)(1));
            w10.Position = 3;
            w10.Expand = false;
            w10.Fill = false;
            this.vbox1.Add(this.hbox2);
            Gtk.Box.BoxChild w11 = ((Gtk.Box.BoxChild)(this.vbox1[this.hbox2]));
            w11.Position = 3;
            w11.Expand = false;
            w11.Fill = false;
            this.Add(this.vbox1);
            if ((this.Child != null)) {
                this.Child.ShowAll();
            }
            this.DefaultWidth = 588;
            this.DefaultHeight = 405;
            this.TracksTreeView.HasDefault = true;
            this.Show();
            this.DeleteEvent += new Gtk.DeleteEventHandler(this.OnDeleteEvent);
            this.SubmitAction.Activated += new System.EventHandler(this.OnSubmitActionActivated);
            this.OpenAction.Activated += new System.EventHandler(this.OnOpenActionActivated);
            this.LastFmAccountAction.Activated += new System.EventHandler(this.OnLastFmAccountActionActivated);
            this.AboutAction.Activated += new System.EventHandler(this.OnAboutActionActivated);
            this.QuitAction.Activated += new System.EventHandler(this.OnQuitActionActivated);
        }
    }
}
